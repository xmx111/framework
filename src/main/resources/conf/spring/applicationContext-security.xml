<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security" xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
	 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	 http://www.springframework.org/schema/context 
	 http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/security 
    http://www.springframework.org/schema/security/spring-security-3.1.xsd"
    default-autowire="byName" default-lazy-init="true">

    <!-- 扫描控制层 -->
    <context:component-scan base-package="com.ufo">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" />
    </context:component-scan>

    <!-- 简化配置方式，自动完成注解的声明 -->
    <context:annotation-config />
    
    <!-- 不要过滤图片等静态资源 -->
    <http pattern="/**/*.jpg" security="none" />
    <http pattern="/**/*.png" security="none" />
    <http pattern="/**/*.gif" security="none" />
    <http pattern="/**/*.css" security="none" />
    <http pattern="/**/*.js" security="none" />
    <http pattern="/**/*.ws" security="none" />
    <http pattern="/download/**/*.*" security="none" />
    <!-- 登录页面和忘记密码页面不过滤 -->
    <http pattern="/login.htm" security="none" />
    <http pattern="/forgotpassword.htm" security="none" />

    <!-- access-denied-page="/accessDenied.htm" -->
    <http auto-config="true" entry-point-ref="loginUrlPoint">
        <!-- 登陆Form -->
        <form-login login-page="/login.htm" authentication-success-handler-ref="loginSuccessHandler"
            authentication-failure-handler-ref="loginFailureHandler" />


        <!-- 自定义访问控制 -->
        <access-denied-handler ref="accessDeniedHandler" />

        <!-- 检测失效的sessionId,超时时定位到另外一个URL
            <custom-filter ref="sessionFilter" before="SESSION_MANAGEMENT_FILTER" />
        -->
        <!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 -->
        <custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
        <!-- 退出登陆 -->
        <logout logout-success-url="/index.htm" />
    </http>
    <!-- 定义登陆成功,或失败处理,此处记录登陆日志 -->
    <b:bean id="loginSuccessHandler" class="com.se.core.security.LoginSuccessHandler">
        <b:property name="defaultTargetUrl" value="/index.htm" />
        <b:property name="targetUrlParameter" value="redirect"/>
    </b:bean>
    <b:bean id="loginFailureHandler" class="com.se.core.security.LoginFailureHandler">
        <b:property name="defaultFailureUrl" value="/login.htm?error=true" />
    </b:bean>

    <!-- 一个自定义的filter，必须包含authenticationManager, accessDecisionManager,securityMetadataSource三个属性。 -->
    <b:bean id="securityFilter" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <b:property name="authenticationManager" ref="authenticationManager" />
        <b:property name="accessDecisionManager" ref="accessDecisionManager" />
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />
    </b:bean>

    <!-- 登陆跳转 -->
    <b:bean id="loginUrlPoint" class="com.se.core.security.LoginUrlEntryPoint" />
    <!-- 无权访问反回json -->
    <b:bean id="accessDeniedHandler" class="com.se.core.security.AccessDeniedHandlerImpl" />
    <!-- 认证管理器 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="daoAuthenticationProvider" />
    </authentication-manager>

    <!--加密 
    <b:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <b:property name="userPropertyToUse" value="loginName" />
    </b:bean>
    -->
    <!-- 用户的密码加密或解密 -->
    <b:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
    <b:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <b:property name="userDetailsService" ref="userDetailsManager" />
        <!-- <b:property name="userCache" ref="userCache" /> -->
        <!-- <b:property name="saltSource" ref="saltSource" /> -->
    </b:bean>


    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
    <b:bean id="accessDecisionManager" class="com.se.core.security.AccessDecisionManager" />

    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
    <b:bean id="securityMetadataSource" class="com.se.core.security.SecurityMetadataSourceService"></b:bean>

    <!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 -->
    <b:bean id="userDetailsManager" class="com.se.core.security.UserDetailsService" />



</b:beans>